{"ast":null,"code":"import _objectWithoutProperties from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"columns\", \"space\", \"spacingX\", \"spacingY\", \"minChildWidth\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { Box, HStack, VStack } from \"../../primitives\";\nimport { useThemeProps } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar DEBUG_STYLES = false ? {\n  rows: {\n    borderWidth: '1px'\n  },\n  cols: {\n    borderWidth: '1px'\n  }\n} : {\n  rows: {},\n  cols: {}\n};\n\nvar SimpleGrid = function SimpleGrid(props, ref) {\n  _s();\n\n  var _useThemeProps = useThemeProps('SimpleGrid', props),\n      columns = _useThemeProps.columns,\n      space = _useThemeProps.space,\n      spacingX = _useThemeProps.spacingX,\n      spacingY = _useThemeProps.spacingY,\n      minChildWidth = _useThemeProps.minChildWidth,\n      children = _useThemeProps.children,\n      remainingProps = _objectWithoutProperties(_useThemeProps, _excluded);\n\n  if (useHasResponsiveProps(props)) {\n    return React.createElement(React.Fragment, null);\n  }\n\n  var cellSpacing = space !== null && space !== void 0 ? space : 0;\n  var cellSpacingX = spacingX !== null && spacingX !== void 0 ? spacingX : cellSpacing;\n  var cellSpacingY = spacingY !== null && spacingY !== void 0 ? spacingY : cellSpacing;\n  var childrenArray = React.Children.toArray(children);\n\n  if (columns) {\n    var rowSlices = [];\n\n    for (var i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return React.createElement(VStack, _extends({}, DEBUG_STYLES.rows, {\n      space: cellSpacingY\n    }, remainingProps, {\n      ref: ref\n    }), rowSlices.map(function (row, rowIndex) {\n      return React.createElement(HStack, {\n        space: cellSpacingX,\n        key: rowIndex\n      }, row.map(function (col) {\n        return React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n          key: col.key\n        }), col);\n      }));\n    }));\n  } else if (minChildWidth) {\n    return React.createElement(Box, _extends({\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\"\n    }, remainingProps, {\n      ref: ref\n    }), childrenArray.map(function (col) {\n      return React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n        mx: cellSpacingX,\n        my: cellSpacingY,\n        key: col.key,\n        minWidth: minChildWidth\n      }), col);\n    }));\n  }\n\n  return React.createElement(React.Fragment, null);\n};\n\n_s(SimpleGrid, \"EmhqQlZiQp8Re95hwfxTdNiXJFw=\", false, function () {\n  return [useThemeProps, useHasResponsiveProps];\n});\n\n_c = SimpleGrid;\nexport default _c3 = React.memo(_c2 = React.forwardRef(SimpleGrid));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SimpleGrid\");\n$RefreshReg$(_c2, \"%default%$React.memo\");\n$RefreshReg$(_c3, \"%default%\");\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/components/composites/SimpleGrid/SimpleGrid.js"],"names":["_extends","Object","i","arguments","source","target","DEBUG_STYLES","rows","borderWidth","cols","SimpleGrid","columns","space","spacingX","spacingY","minChildWidth","children","remainingProps","useThemeProps","useHasResponsiveProps","React","cellSpacing","cellSpacingX","cellSpacingY","childrenArray","rowSlices","ref","key","row","col","flexDirection","flexWrap","justifyContent","mx","my","minWidth"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\n// const isDebug = process.env.NODE_ENV !== 'production';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst DEBUG_STYLES = false ? {\n  rows: {\n    borderWidth: '1px'\n  },\n  cols: {\n    borderWidth: '1px'\n  }\n} : {\n  rows: {},\n  cols: {}\n};\n\nconst SimpleGrid = (props, ref) => {\n  const {\n    columns,\n    space,\n    spacingX,\n    spacingY,\n    minChildWidth,\n    children,\n    ...remainingProps\n  } = useThemeProps('SimpleGrid', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n  let cellSpacing = space !== null && space !== void 0 ? space : 0;\n  let cellSpacingX = spacingX !== null && spacingX !== void 0 ? spacingX : cellSpacing;\n  let cellSpacingY = spacingY !== null && spacingY !== void 0 ? spacingY : cellSpacing;\n  const childrenArray = React.Children.toArray(children);\n\n  if (columns) {\n    let rowSlices = [];\n\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return /*#__PURE__*/React.createElement(VStack, _extends({}, DEBUG_STYLES.rows, {\n      space: cellSpacingY\n    }, remainingProps, {\n      ref: ref\n    }), rowSlices.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(HStack, {\n        space: cellSpacingX,\n        key: rowIndex\n      }, row.map(col => {\n        return /*#__PURE__*/React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n          key: col.key\n        }), col);\n      }));\n    }));\n  } // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n      return /*#__PURE__*/React.createElement(Box, _extends({\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\"\n      }, remainingProps, {\n        ref: ref\n      }), childrenArray.map(col => {\n        return /*#__PURE__*/React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n          mx: cellSpacingX,\n          my: cellSpacingY,\n          key: col.key,\n          minWidth: minChildWidth\n        }), col);\n      }));\n    }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(SimpleGrid));\n//# sourceMappingURL=SimpleGrid.js.map"]},"metadata":{},"sourceType":"module"}