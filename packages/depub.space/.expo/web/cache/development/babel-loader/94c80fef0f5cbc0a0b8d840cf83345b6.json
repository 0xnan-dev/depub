{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMenuTypeahead = exports.useMenuOptionItem = exports.useMenuItem = exports.useMenu = exports.useMenuTrigger = void 0;\n\nvar _focus = require(\"@react-aria/focus\");\n\nvar _utils = require(\"@react-aria/utils\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar useMenuTrigger = function useMenuTrigger(_ref) {\n  var handleOpen = _ref.handleOpen,\n      isOpen = _ref.isOpen;\n  var menuTriggerId = (0, _utils.useId)();\n  return {\n    'onKeyDownCapture': function onKeyDownCapture(event) {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId\n  };\n};\n\nexports.useMenuTrigger = useMenuTrigger;\n\nvar useMenu = function useMenu() {\n  var focusManager = (0, _focus.useFocusManager)();\n\n  var onKeyDown = function onKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n\n  return {\n    onKeyDown: onKeyDown,\n    accessibilityRole: 'menu'\n  };\n};\n\nexports.useMenu = useMenu;\n\nvar useMenuItem = function useMenuItem(_ref2) {\n  var textValue = _ref2.textValue,\n      ref = _ref2.ref;\n  return {\n    accessibilityRole: 'menuitem',\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: function onHoverIn() {\n      if (ref.current && _reactNative.Platform.OS === 'web') ref.current.focus();\n    }\n  };\n};\n\nexports.useMenuItem = useMenuItem;\n\nvar useMenuOptionItem = function useMenuOptionItem(_ref3) {\n  var isChecked = _ref3.isChecked,\n      type = _ref3.type;\n  return {\n    accessibilityRole: 'menuitem' + (_reactNative.Platform.OS === 'web' ? type : ''),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\n\nexports.useMenuOptionItem = useMenuOptionItem;\nvar ITEM_ATTR = 'data-nativebase-menu-item';\n\nvar getValue = function getValue(element) {\n  var _element$getAttribute;\n\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) !== null && _element$getAttribute !== void 0 ? _element$getAttribute : '';\n};\n\nvar useMenuTypeahead = function useMenuTypeahead(props) {\n  return {\n    onKeyDown: function onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        var container = event.currentTarget;\n        var values = Array.from(container.querySelectorAll(\"[\".concat(ITEM_ATTR, \"]\"))).map(getValue);\n        var searchKey = event.key;\n        var foundValue = values.find(function (value) {\n          return value.toLowerCase().startsWith(searchKey);\n        });\n        var newItem = container.querySelector(\"[\".concat(ITEM_ATTR, \"=\\\"\").concat(foundValue, \"\\\"]\"));\n\n        if (newItem) {\n          setTimeout(function () {\n            return newItem.focus();\n          });\n        }\n      }\n    }\n  };\n};\n\nexports.useMenuTypeahead = useMenuTypeahead;","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/commonjs/components/composites/Menu/useMenu.js"],"names":["Object","value","exports","_focus","require","_utils","useMenuTrigger","handleOpen","isOpen","menuTriggerId","event","useMenu","focusManager","onKeyDown","e","wrap","accessibilityRole","useMenuItem","textValue","ref","dataSet","nativebaseMenuItem","onHoverIn","_reactNative","useMenuOptionItem","isChecked","type","accessibilityState","checked","accessibilityChecked","ITEM_ATTR","getValue","_element$getAttribute","element","useMenuTypeahead","props","container","values","Array","searchKey","foundValue","newItem","setTimeout"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMenuTypeahead = exports.useMenuOptionItem = exports.useMenuItem = exports.useMenu = exports.useMenuTrigger = void 0;\n\nvar _focus = require(\"@react-aria/focus\");\n\nvar _utils = require(\"@react-aria/utils\");\n\nvar _reactNative = require(\"react-native\");\n\nconst useMenuTrigger = ({\n  handleOpen,\n  isOpen\n}) => {\n  const menuTriggerId = (0, _utils.useId)();\n  return {\n    'onKeyDownCapture': event => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId\n  };\n};\n\nexports.useMenuTrigger = useMenuTrigger;\n\nconst useMenu = () => {\n  const focusManager = (0, _focus.useFocusManager)();\n\n  const onKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu'\n  };\n};\n\nexports.useMenu = useMenu;\n\nconst useMenuItem = ({\n  textValue,\n  ref\n}) => {\n  return {\n    accessibilityRole: 'menuitem',\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: () => {\n      if (ref.current && _reactNative.Platform.OS === 'web') ref.current.focus();\n    }\n  };\n};\n\nexports.useMenuItem = useMenuItem;\n\nconst useMenuOptionItem = ({\n  isChecked,\n  type\n}) => {\n  return {\n    accessibilityRole: 'menuitem' + (_reactNative.Platform.OS === 'web' ? type : ''),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\n\nexports.useMenuOptionItem = useMenuOptionItem;\nconst ITEM_ATTR = 'data-nativebase-menu-item';\n\nconst getValue = element => {\n  var _element$getAttribute;\n\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) !== null && _element$getAttribute !== void 0 ? _element$getAttribute : '';\n};\n\nconst useMenuTypeahead = props => {\n  return {\n    onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        const container = event.currentTarget;\n        const values = Array.from(container.querySelectorAll(\"[\".concat(ITEM_ATTR, \"]\"))).map(getValue);\n        const searchKey = event.key;\n        const foundValue = values.find(value => value.toLowerCase().startsWith(searchKey));\n        const newItem = container.querySelector(\"[\".concat(ITEM_ATTR, \"=\\\"\").concat(foundValue, \"\\\"]\"));\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => newItem.focus());\n        }\n      }\n    }\n\n  };\n};\n\nexports.useMenuTypeahead = useMenuTypeahead;\n//# sourceMappingURL=useMenu.js.map"]},"metadata":{},"sourceType":"script"}