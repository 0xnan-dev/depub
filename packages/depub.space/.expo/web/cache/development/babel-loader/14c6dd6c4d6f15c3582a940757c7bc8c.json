{"ast":null,"code":"import _slicedToArray from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"children\"];\nimport { memo } from 'react';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useBreakpointValue, useTheme, useToken } from \"../../../hooks\";\nimport { useColorMode } from \"../../../core/color-mode/hooks\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function Hidden(_ref) {\n  _s();\n\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _usePropsResolution = usePropsResolution('Hidden', props, {}, {\n    ignoreProps: ['only', 'platform']\n  }),\n      from = _usePropsResolution.from,\n      till = _usePropsResolution.till,\n      only = _usePropsResolution.only,\n      platform = _usePropsResolution.platform,\n      colorMode = _usePropsResolution.colorMode;\n\n  var _useTheme = useTheme(),\n      breakpoints = _useTheme.breakpoints;\n\n  var currentColorMode = useColorMode();\n  var breakpointValueObject = Object.keys(breakpoints).reduce(function (obj, val) {\n    obj[val] = val;\n    return obj;\n  }, {});\n  var breakpointValue = useBreakpointValue(breakpointValueObject);\n\n  var _useToken = useToken('breakpoints', [breakpointValue]),\n      _useToken2 = _slicedToArray(_useToken, 1),\n      currentBreakpointValue = _useToken2[0];\n\n  var _useToken3 = useToken('breakpoints', [from]),\n      _useToken4 = _slicedToArray(_useToken3, 1),\n      fromBreakPointValue = _useToken4[0];\n\n  var _useToken5 = useToken('breakpoints', [till]),\n      _useToken6 = _slicedToArray(_useToken5, 1),\n      tillBreakPointValue = _useToken6[0];\n\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } else if (from && till && currentBreakpointValue >= fromBreakPointValue && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  } else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } else if (Array.isArray(only) && only.includes(breakpointValue) || only === breakpointValue) {\n    return null;\n  } else if (Array.isArray(platform) && platform.includes(Platform.OS) || platform === Platform.OS) {\n    return null;\n  } else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n\n  return children;\n}\n\n_s(Hidden, \"SsRVChUSwdETJkgsIKtKl7o5Vc8=\", false, function () {\n  return [usePropsResolution, useTheme, useColorMode, useBreakpointValue, useToken, useToken, useToken];\n});\n\n_c = Hidden;\nexport default _c2 = memo(Hidden);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Hidden\");\n$RefreshReg$(_c2, \"%default%\");\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/components/primitives/Hidden/index.js"],"names":["Hidden","children","props","from","till","only","platform","colorMode","usePropsResolution","ignoreProps","breakpoints","useTheme","currentColorMode","useColorMode","breakpointValueObject","Object","obj","breakpointValue","useBreakpointValue","currentBreakpointValue","useToken","fromBreakPointValue","tillBreakPointValue","Array","Platform","memo"],"mappings":"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","sourcesContent":["import { memo } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\nexport function Hidden({\n  children,\n  ...props\n}) {\n  const {\n    from,\n    till,\n    only,\n    platform,\n    colorMode\n  } = usePropsResolution('Hidden', props, {}, {\n    ignoreProps: ['only', 'platform']\n  });\n  const {\n    breakpoints\n  } = useTheme();\n  const currentColorMode = useColorMode();\n  const breakpointValueObject = Object.keys(breakpoints).reduce((obj, val) => {\n    obj[val] = val;\n    return obj;\n  }, {});\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]); //if no prop is passed, it will hide the element wrapped with hidden\n\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (from && till && currentBreakpointValue >= fromBreakPointValue && currentBreakpointValue < tillBreakPointValue) {\n      return null;\n    } //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n    else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n        return null;\n      } //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n      else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n          return null;\n        } //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n        // if only prop is string, hide on that breakpoint to next breakpoint.\n        else if (Array.isArray(only) && only.includes(breakpointValue) || only === breakpointValue) {\n            return null;\n          } //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n          // if platform prop is string, hide on that platform.\n          else if (Array.isArray(platform) && platform.includes(Platform.OS) || platform === Platform.OS) {\n              return null;\n            } //if colormode prop is valid string, hide on that colormode.\n            else if (colorMode === currentColorMode.colorMode) {\n                return null;\n              }\n\n  return children;\n}\nexport default /*#__PURE__*/memo(Hidden);\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}