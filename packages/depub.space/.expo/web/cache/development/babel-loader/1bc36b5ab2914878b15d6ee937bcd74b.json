{"ast":null,"code":"import _slicedToArray from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { useKeyboardDismissable } from \"../../../hooks\";\nimport { ExitAnimationContext } from \"./ExitAnimationContext\";\nexport function Overlay(_ref) {\n  _s();\n\n  var children = _ref.children,\n      isOpen = _ref.isOpen,\n      _ref$useRNModalOnAndr = _ref.useRNModalOnAndroid,\n      useRNModalOnAndroid = _ref$useRNModalOnAndr === void 0 ? false : _ref$useRNModalOnAndr,\n      _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n      isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n      _ref$animationPreset = _ref.animationPreset,\n      animationPreset = _ref$animationPreset === void 0 ? 'fade' : _ref$animationPreset,\n      onRequestClose = _ref.onRequestClose;\n\n  var _React$useState = React.useState(!isOpen),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      exited = _React$useState2[0],\n      setExited = _React$useState2[1];\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : function () {}\n  });\n\n  if (exited && !isOpen) {\n    return null;\n  }\n\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      }\n    }, React.createElement(Modal, {\n      transparent: true,\n      visible: true,\n      onRequestClose: onRequestClose\n    }, children));\n  }\n\n  return React.createElement(OverlayContainer, null, React.createElement(ExitAnimationContext.Provider, {\n    value: {\n      exited: exited,\n      setExited: setExited\n    }\n  }, children));\n}\n\n_s(Overlay, \"SAMSJehf4YEOFhQ/cBW/8RCig8I=\", false, function () {\n  return [useKeyboardDismissable];\n});\n\n_c = Overlay;\n\nvar _c;\n\n$RefreshReg$(_c, \"Overlay\");\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/components/primitives/Overlay/Overlay.js"],"names":["Overlay","children","isOpen","useRNModalOnAndroid","isKeyboardDismissable","animationPreset","onRequestClose","exited","setExited","React","useKeyboardDismissable","enabled","callback","Platform","ExitAnimationContext","value","transparent","visible"],"mappings":";;;;AACA,SAAA,gBAAA,QAAA,6BAAA;AACA,OAAA,KAAA,MAAA,OAAA;;;AAGA,SAAA,sBAAA;AACA,SAAA,oBAAA;AACA,OAAO,SAAA,OAAA,CAAA,IAAA,EAQJ;AAAA,EAAA,EAAA;;AAPDC,MAAAA,QAOC,GAAA,IAAA,CAPDA,QAAAA;AAAAA,MACAC,MAMC,GAAA,IAAA,CANDA,MADAD;AAAAA,MAOC,qBAAA,GAAA,IAAA,CALDE,mBAFAF;AAAAA,MAEAE,mBAKC,GAAA,qBAAA,KAAA,KAAA,CAAA,GALqB,KAKrB,GAAA,qBAPDF;AAAAA,MAOC,qBAAA,GAAA,IAAA,CAJDG,qBAHAH;AAAAA,MAGAG,qBAIC,GAAA,qBAAA,KAAA,KAAA,CAAA,GAJuB,IAIvB,GAAA,qBAPDH;AAAAA,MAOC,oBAAA,GAAA,IAAA,CAFDI,eALAJ;AAAAA,MAKAI,eAEC,GAAA,oBAAA,KAAA,KAAA,CAAA,GAFiB,MAEjB,GAAA,oBAPDJ;AAAAA,MAMAK,cACC,GAAA,IAAA,CADDA,cANAL;;AAQA,MAAA,eAAA,GAA4BQ,KAAK,CAALA,QAAAA,CAAe,CAA3C,MAA4BA,CAA5B;AAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAAOF,MAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAAeC,SAAf,GAAA,gBAAA,CAAA,CAAA,CAAA;;AACAE,EAAAA,sBAAsB,CAAC;AACrBC,IAAAA,OAAO,EAAET,MAAM,IADM,qBAAA;AAErBU,IAAAA,QAAQ,EAAEN,cAAc,GAAA,cAAA,GAAoB,YAAM,CAFpDI;AAAuB,GAAD,CAAtBA;;AAKA,MAAIH,MAAM,IAAI,CAAd,MAAA,EAAuB;AACrB,WAAA,IAAA;AASF;;AAAA,MAAIM,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,IAAJ,mBAAA,EAAsD;AACpD,WAAoBJ,KAAK,CAALA,aAAAA,CAAoBK,oBAAoB,CAAxCL,QAAAA,EAAmD;AACrEM,MAAAA,KAAK,EAAE;AACLR,QAAAA,MAAM,EADD,MAAA;AAELC,QAAAA,SAAS,EAHOC;AACX;AAD8D,KAAnDA,EAKJA,KAAK,CAALA,aAAAA,CAAAA,KAAAA,EAA2B;AACzCO,MAAAA,WAAW,EAD8B,IAAA;AAEzCC,MAAAA,OAAO,EAFkC,IAAA;AAGzCX,MAAAA,cAAc,EAHAG;AAA2B,KAA3BA,EALhB,QAKgBA,CALIA,CAApB;AAeF;;AAAA,SAGEA,KAAK,CAALA,aAAAA,CAAAA,gBAAAA,EAAAA,IAAAA,EAAyDA,KAAK,CAALA,aAAAA,CAAoBK,oBAAoB,CAAxCL,QAAAA,EAAmD;AAC1GM,IAAAA,KAAK,EAAE;AACLR,MAAAA,MAAM,EADD,MAAA;AAELC,MAAAA,SAAS,EAH4CC;AAChD;AADmG,GAAnDA,EAH3D,QAG2DA,CAAzDA,CAHF;;;GAzCcT,O;UAUdU,sB;;;KAVcV,O","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport { Modal } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose\n}) {\n  const [exited, setExited] = React.useState(!isOpen);\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {}\n  }); //TODO: performance remove-below-lines of code after updating react-native-aria\n\n  if (exited && !isOpen) {\n    return null;\n  } // Android handles multiple Modal in RN and is better for accessibility as it shifts accessibility focus on mount, however it may not needed in case of tooltips, toast where one doesn't need to shift accessibility focus\n  //TODO: performance add-below-lines of code after updating react-native-aria\n  // let display = exited && !isOpen ? 'none' : 'contents';\n  // if (animationPreset === 'slide') {\n  //   display = 'contents';\n  // }\n\n\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return /*#__PURE__*/React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited,\n        setExited\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      transparent: true,\n      visible: true,\n      onRequestClose: onRequestClose\n    }, children));\n  } // Since OverlayContainer mounts children in NativeBaseProvider  using Context, we need to pass the context by wrapping children\n  //TODO: performance add-below-lines of code after updating react-native-aria\n  // <OverlayContainer style={{ display: display }}>\n\n\n  return (\n    /*#__PURE__*/\n    //@ts-ignore\n    React.createElement(OverlayContainer, null, /*#__PURE__*/React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited,\n        setExited\n      }\n    }, children))\n  );\n}\n//# sourceMappingURL=Overlay.js.map"]},"metadata":{},"sourceType":"module"}