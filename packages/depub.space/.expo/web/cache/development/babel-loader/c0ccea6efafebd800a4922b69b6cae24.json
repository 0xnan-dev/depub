{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResolvedFontFamily = useResolvedFontFamily;\n\nvar _useTheme = require(\"./useTheme\");\n\nfunction useResolvedFontFamily(props) {\n  var fontFamily = props.fontFamily,\n      fontStyle = props.fontStyle,\n      fontWeight = props.fontWeight;\n  var newFontFamily = fontFamily;\n  var newFontStyle = fontStyle;\n  var newFontWeight = fontWeight;\n\n  var _ref = (0, _useTheme.useTheme)(),\n      fontConfig = _ref.fontConfig,\n      fontWeights = _ref.fontWeights,\n      fonts = _ref.fonts;\n\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    var fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      newFontWeight = undefined;\n      newFontStyle = undefined;\n      var fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      var fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/commonjs/hooks/useResolvedFontFamily.js"],"names":["Object","value","exports","_useTheme","require","fontFamily","fontStyle","fontWeight","props","newFontFamily","newFontStyle","newFontWeight","fontConfig","fontWeights","fonts","fontToken","fontWeightNumber","fontVariant"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;AAC3CC,EAAAA,KAAK,EADPD;AAA6C,CAA7CA;AAGAE,OAAO,CAAPA,qBAAAA,GAAAA,qBAAAA;;AAEA,IAAIC,SAAS,GAAGC,OAAhB,cAAA;;AAWA,SAAA,qBAAA,CAAA,KAAA,EAAsC;AACpC,MACEC,UADF,GAIIG,KAJJ,CAAA,UAAA;AAAA,MAEEF,SAFF,GAIIE,KAJJ,CAAA,SAAA;AAAA,MAGED,UAHF,GAIIC,KAJJ,CAAA,UAAA;AAKA,MAAIC,aAAa,GAAjB,UAAA;AACA,MAAIC,YAAY,GAAhB,SAAA;AACA,MAAIC,aAAa,GAAjB,UAAA;;AACA,MAAA,IAAA,GAII,CAAC,GAAGR,SAAS,CAJjB,QAII,GAJJ;AAAA,MACES,UADF,GAAA,IAAA,CAAA,UAAA;AAAA,MAEEC,WAFF,GAAA,IAAA,CAAA,WAAA;AAAA,MAGEC,KAHF,GAAA,IAAA,CAAA,KAAA;;AAMA,MAAIP,UAAU,IAAVA,SAAAA,IAAAA,UAAAA,IAAyCF,UAAU,IAAvD,KAAA,EAAkE;AAEhE,QAAMU,SAAS,GAAGD,KAAK,CAAvB,UAAuB,CAAvB;;AAEA,QAAIF,UAAU,IAAIA,UAAU,CAA5B,SAA4B,CAA5B,EAAyC;AAKvCD,MAAAA,aAAa,GAAbA,SAAAA;AAEAD,MAAAA,YAAY,GAAZA,SAAAA;AACA,UAAIM,gBAAgB,GAAGT,UAAU,IAAVA,WAAAA,GAA4BM,WAAW,CAAvCN,UAAuC,CAAvCA,GAAvB,UAAA;AACA,UAAIU,WAAW,GAAGL,UAAU,CAAVA,SAAU,CAAVA,CAAlB,gBAAkBA,CAAlB;;AAEA,UAAI,OAAA,WAAA,KAAJ,QAAA,EAAqC;AACnC,YAAIK,WAAW,CAAf,SAAe,CAAf,EAA4BR,aAAa,GAAGQ,WAAW,CAA3BR,SAA2B,CAA3BA;AAD9B,OAAA,MAEO;AACLA,QAAAA,aAAa,GAAbA,WAAAA;AAEH;AAhBD,KAAA,MAgBO;AACLA,MAAAA,aAAa,GAAGK,KAAK,CAArBL,UAAqB,CAArBA;AAEH;AAED;;AAAA,SAAO;AACLJ,IAAAA,UAAU,EADL,aAAA;AAELE,IAAAA,UAAU,EAFL,aAAA;AAGLD,IAAAA,SAAS,EAHX;AAAO,GAAP;AAKD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResolvedFontFamily = useResolvedFontFamily;\n\nvar _useTheme = require(\"./useTheme\");\n\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nfunction useResolvedFontFamily(props) {\n  const {\n    fontFamily,\n    fontStyle,\n    fontWeight\n  } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n  const {\n    fontConfig,\n    fontWeights,\n    fonts\n  } = (0, _useTheme.useTheme)();\n\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    // TODO: Fix typing remove any.\n    const fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined; //@ts-ignore\n\n      newFontStyle = undefined;\n      let fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}\n//# sourceMappingURL=useResolvedFontFamily.js.map"]},"metadata":{},"sourceType":"script"}