{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { SafeAreaProvider, initialWindowMetrics as defaultInitialWindowMetrics } from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme } from \"./../theme\";\nimport HybridProvider from \"./hybrid-overlay/HybridProvider\";\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from \"../components/composites/Toast\";\nimport { defaultConfig, NativeBaseConfigProvider } from \"./NativeBaseContext\";\nimport { useToast } from \"../components/composites/Toast\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { getClosestBreakpoint, platformSpecificSpaceUnits } from \"../theme/tools/utils\";\nimport { ResponsiveQueryProvider } from \"../utils/useResponsiveQuery\";\nvar defaultInitialWindowMetricsBasedOnPlatform = Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  \"default\": defaultInitialWindowMetrics\n});\n\nvar NativeBaseProvider = function NativeBaseProvider(props) {\n  _s();\n\n  var _config$theme, _useWindowDimensions;\n\n  var colorModeManager = props.colorModeManager,\n      _props$config = props.config,\n      config = _props$config === void 0 ? defaultConfig : _props$config,\n      children = props.children,\n      _props$theme = props.theme,\n      propsTheme = _props$theme === void 0 ? defaultTheme : _props$theme,\n      initialWindowMetrics = props.initialWindowMetrics,\n      isSSR = props.isSSR,\n      disableContrastText = props.disableContrastText;\n  var theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n  var newTheme = React.useMemo(function () {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n\n    return theme;\n  }, [config.enableRem, theme]);\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  var currentBreakpoint = React.useMemo(function () {\n    return getClosestBreakpoint(newTheme.breakpoints, windowWidth);\n  }, [windowWidth, newTheme.breakpoints]);\n  return React.createElement(NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, React.createElement(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, React.createElement(ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, React.createElement(HybridProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, React.createElement(OverlayProvider, null, React.createElement(ToastProvider, null, React.createElement(InitializeToastRef, null), React.createElement(SSRProvider, null, children)))))));\n};\n\n_s(NativeBaseProvider, \"Z0TOhoRd7K5V5p+vKVujSUGdVHA=\", false, function () {\n  return [useWindowDimensions];\n});\n\n_c = NativeBaseProvider;\n\nvar InitializeToastRef = function InitializeToastRef() {\n  _s2();\n\n  var toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\n_s2(InitializeToastRef, \"WUU7e0p6AiTpvVrXhi50JBdcu+0=\", false, function () {\n  return [useToast];\n});\n\n_c2 = InitializeToastRef;\nexport { NativeBaseProvider };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NativeBaseProvider\");\n$RefreshReg$(_c2, \"InitializeToastRef\");\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/core/NativeBaseProvider.js"],"names":["initialWindowMetrics","theme","defaultInitialWindowMetricsBasedOnPlatform","Platform","web","frame","x","y","width","height","insets","top","left","right","bottom","NativeBaseProvider","colorModeManager","config","children","propsTheme","isSSR","disableContrastText","props","_config$theme","newTheme","React","platformSpecificSpaceUnits","windowWidth","_useWindowDimensions","useWindowDimensions","currentBreakpoint","getClosestBreakpoint","initialMetrics","disableCSSMediaQueries","options","InitializeToastRef","toast","useToast","ToastRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { SafeAreaProvider, initialWindowMetrics as defaultInitialWindowMetrics } from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme } from './../theme';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport { defaultConfig, NativeBaseConfigProvider } from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport { getClosestBreakpoint, platformSpecificSpaceUnits } from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery'; // For SSR to work, we need to pass initial insets as 0 values on web.\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\n\nconst defaultInitialWindowMetricsBasedOnPlatform = Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: defaultInitialWindowMetrics\n});\n\nconst NativeBaseProvider = props => {\n  var _config$theme, _useWindowDimensions;\n\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText\n  } = props;\n  const theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n\n    return theme;\n  }, [config.enableRem, theme]);\n  const windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  const currentBreakpoint = React.useMemo(() => getClosestBreakpoint(newTheme.breakpoints, windowWidth), [windowWidth, newTheme.breakpoints]);\n  return /*#__PURE__*/React.createElement(NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, /*#__PURE__*/React.createElement(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, /*#__PURE__*/React.createElement(ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, /*#__PURE__*/React.createElement(HybridProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, /*#__PURE__*/React.createElement(OverlayProvider, null, /*#__PURE__*/React.createElement(ToastProvider, null, /*#__PURE__*/React.createElement(InitializeToastRef, null), /*#__PURE__*/React.createElement(SSRProvider, null, children)))))));\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n//# sourceMappingURL=NativeBaseProvider.js.map"]},"metadata":{},"sourceType":"module"}