{"ast":null,"code":"import _slicedToArray from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { HybridContext } from \"./Context\";\nimport { useModeManager } from \"./../color-mode/hooks\";\nimport { keyboardDismissHandlerManager } from \"../../hooks\";\n\nvar HybridProvider = function HybridProvider(_ref) {\n  _s();\n\n  var children = _ref.children,\n      _ref$options = _ref.options,\n      _ref$options$initialC = _ref$options.initialColorMode,\n      initialColorMode = _ref$options$initialC === void 0 ? 'light' : _ref$options$initialC,\n      _ref$options$accessib = _ref$options.accessibleColors,\n      isTextColorAccessible = _ref$options$accessib === void 0 ? false : _ref$options$accessib,\n      useSystemColorMode = _ref$options.useSystemColorMode,\n      colorModeManager = _ref.colorModeManager;\n\n  var _useModeManager = useModeManager(initialColorMode, useSystemColorMode, colorModeManager),\n      colorMode = _useModeManager.colorMode,\n      setColorMode = _useModeManager.setColorMode;\n\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  var _React$useState = React.useState(isTextColorAccessible),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      accessibleColors = _React$useState2[0],\n      setAccessibleColors = _React$useState2[1];\n\n  var contextValue = useMemo(function () {\n    return {\n      colorMode: {\n        colorMode: colorMode,\n        toggleColorMode: toggleColorMode,\n        setColorMode: setColorMode,\n        accessibleColors: accessibleColors,\n        setAccessibleColors: setAccessibleColors\n      }\n    };\n  }, [colorMode, toggleColorMode, setColorMode, accessibleColors, setAccessibleColors]);\n  React.useEffect(function () {\n    var escapeKeyListener = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = function escapeKeyListener(e) {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            var lastHandler = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return function () {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n  return React.createElement(HybridContext.Provider, {\n    value: contextValue\n  }, children);\n};\n\n_s(HybridProvider, \"cJ3ANclVkXhtwe2DpbPBM5bcrCA=\", false, function () {\n  return [useModeManager];\n});\n\n_c = HybridProvider;\nexport default HybridProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"HybridProvider\");\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/core/hybrid-overlay/HybridProvider.js"],"names":["HybridProvider","children","options","initialColorMode","accessibleColors","isTextColorAccessible","useSystemColorMode","colorModeManager","colorMode","setColorMode","useModeManager","toggleColorMode","React","setAccessibleColors","contextValue","useMemo","escapeKeyListener","Platform","e","keyboardDismissHandlerManager","lastHandler","document","HybridContext","value"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n    useSystemColorMode\n  },\n  colorModeManager\n}) => {\n  // Color-mode content\n  const {\n    colorMode,\n    setColorMode\n  } = useModeManager(initialColorMode, useSystemColorMode, colorModeManager);\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]); // Accessible color hook\n\n  const [accessibleColors, setAccessibleColors] = React.useState(isTextColorAccessible);\n  const contextValue = useMemo(() => {\n    return {\n      colorMode: {\n        colorMode,\n        toggleColorMode,\n        setColorMode,\n        accessibleColors,\n        setAccessibleColors\n      }\n    };\n  }, [colorMode, toggleColorMode, setColorMode, accessibleColors, setAccessibleColors]);\n  React.useEffect(() => {\n    let escapeKeyListener = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = e => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(HybridContext.Provider, {\n    value: contextValue\n  }, children);\n};\n\nexport default HybridProvider;\n//# sourceMappingURL=HybridProvider.js.map"]},"metadata":{},"sourceType":"module"}