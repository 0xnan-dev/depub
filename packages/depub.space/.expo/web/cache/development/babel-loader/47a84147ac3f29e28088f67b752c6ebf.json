{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nvar hash = function hash(str) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nvar _default = hash;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/commonjs/utils/useResponsiveQuery/hash.js"],"names":["Object","value","exports","l","str","h","seed","i","k","hash","murmurhash2_32_gc","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;AAC3CC,EAAAA,KAAK,EADPD;AAA6C,CAA7CA;AAGAE,OAAAA,WAAAA,GAAkB,KAAlBA,CAAAA;;AAkBA,SAAA,iBAAA,CAAA,GAAA,EAAA,IAAA,EAAsC;AACpC,MAAIC,CAAC,GAAGC,GAAG,CAAX,MAAA;AAAA,MACIC,CAAC,GAAGC,IAAI,GADZ,CAAA;AAAA,MAEIC,CAAC,GAFL,CAAA;AAAA,MAAA,CAAA;;AAKA,SAAOJ,CAAC,IAAR,CAAA,EAAe;AACbK,IAAAA,CAAC,GAAGJ,GAAG,CAAHA,UAAAA,CAAAA,CAAAA,IAAAA,IAAAA,GAA2B,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KAA3BA,CAAAA,GAA+D,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KAA/DA,EAAAA,GAAoG,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KAAxGI,EAAAA;AACAA,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAAjCA,EAAI,CAAJA;AACAA,IAAAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;AACAA,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAAjCA,EAAI,CAAJA;AACAH,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAA7B,EAAA,IAAJA,CAAAA;AACAF,IAAAA,CAAC,IAADA,CAAAA;AACA,MAAA,CAAA;AAGF;;AAAA,UAAA,CAAA;AACE,SAAA,CAAA;AACEE,MAAAA,CAAC,IAAI,CAACD,GAAG,CAAHA,UAAAA,CAAeG,CAAC,GAAhBH,CAAAA,IAAD,IAAA,KAALC,EAAAA;;AAEF,SAAA,CAAA;AACEA,MAAAA,CAAC,IAAI,CAACD,GAAG,CAAHA,UAAAA,CAAeG,CAAC,GAAhBH,CAAAA,IAAD,IAAA,KAALC,CAAAA;;AAEF,SAAA,CAAA;AACEA,MAAAA,CAAC,IAAID,GAAG,CAAHA,UAAAA,CAAAA,CAAAA,IAALC,IAAAA;AACAA,MAAAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KATrC,EASQ,CAAJA;AATJ;;AAYAA,EAAAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;AACAA,EAAAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAAjCA,EAAI,CAAJA;AACAA,EAAAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;AACA,SAAOA,CAAC,KAAR,CAAA;AAGF;;AAAA,IAAMI,IAAI,GAAG,SAAA,IAAA,CAAA,GAAA,EAAmB;AAC9B,SAAOC,iBAAiB,CAAA,GAAA,EAAjBA,CAAiB,CAAjBA,CAAAA,QAAAA,CAAP,EAAOA,CAAP;AADF,CAAA;;AAIA,IAAIC,QAAQ,GAAZ,IAAA;AACAT,OAAAA,WAAAA,GAAAA,QAAAA","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/* eslint-disable */\n//@ts-nocheck\n// This hash function is taken from react native web\n\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {string} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\nfunction murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nconst hash = function hash(str) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nvar _default = hash;\nexports.default = _default;\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"script"}