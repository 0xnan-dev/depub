{"ast":null,"code":"var _s = $RefreshSig$();\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useKeyboardDismissable, usePropsResolution, useToken } from \"../../../hooks\";\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Popper } from \"../Popper\";\nimport { PopoverContext } from \"./PopoverContext\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nexport var PopoverContent = React.forwardRef(_c = _s(function (props, ref) {\n  _s();\n\n  var _ref, _ref2, _props$bgColor;\n\n  var _React$useContext = React.useContext(PopoverContext),\n      onClose = _React$useContext.onClose,\n      initialFocusRef = _React$useContext.initialFocusRef,\n      finalFocusRef = _React$useContext.finalFocusRef,\n      popoverContentId = _React$useContext.popoverContentId,\n      headerMounted = _React$useContext.headerMounted,\n      bodyMounted = _React$useContext.bodyMounted,\n      bodyId = _React$useContext.bodyId,\n      headerId = _React$useContext.headerId;\n\n  var resolvedProps = usePropsResolution('PopoverContent', props);\n  var arrowDefaultColor = (_ref = (_ref2 = (_props$bgColor = props.bgColor) !== null && _props$bgColor !== void 0 ? _props$bgColor : props.bg) !== null && _ref2 !== void 0 ? _ref2 : props.backgroundColor) !== null && _ref !== void 0 ? _ref : resolvedProps.backgroundColor;\n  var color = useToken('colors', arrowDefaultColor);\n  React.useEffect(function () {\n    var finalFocusRefCurrentVal = finalFocusRef === null || finalFocusRef === void 0 ? void 0 : finalFocusRef.current;\n\n    if (initialFocusRef && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    }\n\n    return function () {\n      if (finalFocusRefCurrentVal) {\n        finalFocusRefCurrentVal.focus();\n      }\n    };\n  }, [finalFocusRef, initialFocusRef]);\n  useKeyboardDismissable({\n    enabled: true,\n    callback: onClose\n  });\n  var arrowElement = null;\n  var restChildren = [];\n  React.Children.forEach(props.children, function (child) {\n    if (child.type.displayName === 'PopperArrow') {\n      var _child$props$color;\n\n      arrowElement = React.cloneElement(child, {\n        backgroundColor: (_child$props$color = child.props.color) !== null && _child$props$color !== void 0 ? _child$props$color : color\n      });\n    } else {\n      restChildren.push(child);\n    }\n  });\n  var accessibilityProps = Platform.OS === 'web' ? {\n    'accessibilityRole': 'dialog',\n    'aria-labelledby': headerMounted ? headerId : undefined,\n    'aria-describedby': bodyMounted ? bodyId : undefined\n  } : {};\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Popper.Content, _extends({\n    nativeID: popoverContentId\n  }, accessibilityProps, resolvedProps, props, {\n    ref: ref\n  }), arrowElement, restChildren);\n}, \"jwdFkWVn4I6iw915PHS17gJ83VQ=\", false, function () {\n  return [usePropsResolution, useToken, useKeyboardDismissable, useHasResponsiveProps];\n}));\n_c2 = PopoverContent;\nPopoverContent.displayName = 'PopoverContent';\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PopoverContent$React.forwardRef\");\n$RefreshReg$(_c2, \"PopoverContent\");\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/components/composites/Popover/PopoverContent.js"],"names":["_extends","Object","i","arguments","source","target","PopoverContent","React","onClose","initialFocusRef","finalFocusRef","popoverContentId","headerMounted","bodyMounted","bodyId","headerId","resolvedProps","usePropsResolution","arrowDefaultColor","_ref","_ref2","_props$bgColor","props","color","useToken","finalFocusRefCurrentVal","useKeyboardDismissable","enabled","callback","arrowElement","restChildren","child","backgroundColor","_child$props$color","accessibilityProps","Platform","useHasResponsiveProps","Popper","nativeID","ref"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useKeyboardDismissable, usePropsResolution, useToken } from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport const PopoverContent = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _ref, _ref2, _props$bgColor;\n\n  const {\n    onClose,\n    initialFocusRef,\n    finalFocusRef,\n    popoverContentId,\n    headerMounted,\n    bodyMounted,\n    bodyId,\n    headerId\n  } = React.useContext(PopoverContext);\n  const resolvedProps = usePropsResolution('PopoverContent', props);\n  const arrowDefaultColor = (_ref = (_ref2 = (_props$bgColor = props.bgColor) !== null && _props$bgColor !== void 0 ? _props$bgColor : props.bg) !== null && _ref2 !== void 0 ? _ref2 : props.backgroundColor) !== null && _ref !== void 0 ? _ref : resolvedProps.backgroundColor;\n  const color = useToken('colors', arrowDefaultColor);\n  React.useEffect(() => {\n    const finalFocusRefCurrentVal = finalFocusRef === null || finalFocusRef === void 0 ? void 0 : finalFocusRef.current;\n\n    if (initialFocusRef && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalFocusRefCurrentVal) {\n        finalFocusRefCurrentVal.focus();\n      }\n    };\n  }, [finalFocusRef, initialFocusRef]);\n  useKeyboardDismissable({\n    enabled: true,\n    callback: onClose\n  });\n  let arrowElement = null;\n  const restChildren = [];\n  React.Children.forEach(props.children, child => {\n    if (child.type.displayName === 'PopperArrow') {\n      var _child$props$color;\n\n      arrowElement = /*#__PURE__*/React.cloneElement(child, {\n        backgroundColor: (_child$props$color = child.props.color) !== null && _child$props$color !== void 0 ? _child$props$color : color\n      });\n    } else {\n      restChildren.push(child);\n    }\n  });\n  const accessibilityProps = Platform.OS === 'web' ? {\n    'accessibilityRole': 'dialog',\n    'aria-labelledby': headerMounted ? headerId : undefined,\n    'aria-describedby': bodyMounted ? bodyId : undefined\n  } : {}; //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Popper.Content, _extends({\n    nativeID: popoverContentId\n  }, accessibilityProps, resolvedProps, props, {\n    ref: ref\n  }), arrowElement, restChildren);\n});\nPopoverContent.displayName = 'PopoverContent';\n//# sourceMappingURL=PopoverContent.js.map"]},"metadata":{},"sourceType":"module"}