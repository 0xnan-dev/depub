{"ast":null,"code":"import _slicedToArray from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { useTypeaheadReducer } from \"./reducer\";\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from \"./types\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { dropdownDefaultStateValues, getDefaultValue } from \"./utils\";\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\nexport function useTypeahead(props) {\n  _s();\n\n  var defaultValues = _objectSpread({}, dropdownDefaultStateValues);\n\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  var _React$useReducer = React.useReducer(useTypeaheadReducer, defaultValues),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var dispatchWithProps = function dispatchWithProps(object) {\n    dispatch(_objectSpread(_objectSpread({}, object), {}, {\n      props: props\n    }));\n  };\n\n  var inputValue = state.inputValue,\n      isOpen = state.isOpen;\n  var items = props.items,\n      onInputValueChange = props.onInputValueChange,\n      onSelectedItemChange = props.onSelectedItemChange,\n      selectedItem = props.selectedItem,\n      itemToString = props.itemToString;\n  var isControlled = isControlledProp(props, 'selectedItem');\n  useEffect(function () {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  var onChangeText = function onChangeText(text) {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n\n  var handleItemSelect = function handleItemSelect(item, index) {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index: index\n    });\n    Keyboard.dismiss();\n  };\n\n  var getMenuItemProps = function getMenuItemProps(item, index) {\n    return {\n      onPress: function onPress() {\n        return handleItemSelect(item, index);\n      },\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n\n  var getMenuProps = function getMenuProps() {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n\n  var getToggleButtonProps = function getToggleButtonProps() {\n    return {\n      onPress: function onPress() {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n\n  var getInputProps = function getInputProps(propInputVal, propOnchangeText) {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n\n  return {\n    getInputProps: getInputProps,\n    getMenuItemProps: getMenuItemProps,\n    getMenuProps: getMenuProps,\n    getToggleButtonProps: getToggleButtonProps,\n    isOpen: isOpen\n  };\n}\n\n_s(useTypeahead, \"W/0g4fM6aE87kNZ0Uhdp9P2sXlM=\");\n\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/components/composites/Typeahead/useTypeahead/useTypeahead.js"],"names":["props","useTypeahead","defaultValues","getDefaultValue","state","dispatch","React","dispatchWithProps","inputValue","isOpen","items","onInputValueChange","onSelectedItemChange","selectedItem","itemToString","isControlled","isControlledProp","useEffect","type","stateChangeTypes","onChangeText","handleItemSelect","index","Keyboard","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","getToggleButtonProps","getInputProps","propInputVal","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"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","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\nexport function useTypeahead(props) {\n  let defaultValues = { ...dropdownDefaultStateValues\n  };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n  const [state, dispatch] = React.useReducer(useTypeaheadReducer, defaultValues);\n\n  const dispatchWithProps = object => {\n    dispatch({ ...object,\n      props\n    });\n  };\n\n  const {\n    inputValue,\n    isOpen\n  } = state;\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString\n  } = props;\n  const isControlled = isControlledProp(props, 'selectedItem');\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = text => {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n\n  const handleItemSelect = (item, index) => {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index\n    });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item, index) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n\n  const getInputProps = (propInputVal, propOnchangeText) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen\n  };\n}\n//# sourceMappingURL=useTypeahead.js.map"]},"metadata":{},"sourceType":"module"}