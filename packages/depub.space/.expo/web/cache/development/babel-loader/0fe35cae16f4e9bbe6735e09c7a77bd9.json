{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useContrastText = useContrastText;\n\nvar _tinycolor = _interopRequireDefault(require(\"tinycolor2\"));\n\nvar _useToken = require(\"./useToken\");\n\nvar _hooks = require(\"../core/color-mode/hooks\");\n\nvar _NativeBaseContext = require(\"../core/NativeBaseContext\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction useContrastText(bg, color, disableContrastText) {\n  var _ref = (0, _useToken.useToken)('colors', ['contrastThreshold', 'darkText', 'lightText', bg, color !== null && color !== void 0 ? color : '']),\n      _ref2 = _slicedToArray(_ref, 5),\n      contrastThreshold = _ref2[0],\n      trueDarkText = _ref2[1],\n      trueLightText = _ref2[2],\n      trueBg = _ref2[3],\n      trueColor = _ref2[4];\n\n  var suppressColorAccessibilityWarning = (0, _NativeBaseContext.useNativeBaseConfig)('NativeBaseConfigProvider').config.suppressColorAccessibilityWarning;\n\n  var _ref3 = (0, _hooks.useAccessibleColors)(),\n      _ref4 = _slicedToArray(_ref3, 1),\n      accessibleColors = _ref4[0];\n\n  if (disableContrastText) {\n    return;\n  }\n\n  if (typeof bg !== 'string') {\n    return;\n  }\n\n  var _bg$split = bg.split('.'),\n      _bg$split2 = _slicedToArray(_bg$split, 2),\n      bgThemeColorVariant = _bg$split2[0],\n      bgShade = _bg$split2[1];\n\n  var textColor = !accessibleColors && bgThemeColorVariant && themeColorsThresholdShades[bgThemeColorVariant] ? getContrastThemeColor(bgThemeColorVariant, bgShade) : getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning);\n  return textColor;\n}\n\nfunction getContrastThemeColor(bgThemeColorVariant, bgShade) {\n  var shadeThreshold = themeColorsThresholdShades[bgThemeColorVariant];\n\n  if (bgShade && shadeThreshold && (bgShade >= shadeThreshold && bgThemeColorVariant !== 'dark' || bgThemeColorVariant === 'dark' && bgShade < shadeThreshold)) {\n    return 'lightText';\n  }\n\n  return 'darkText';\n}\n\nfunction getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning) {\n  if (typeof trueBg !== 'string') {\n    trueBg = bg;\n  }\n\n  var trueContrastColor;\n  var contrastColorToken;\n  var darkTextConstrast = getContrastRatio(trueBg, trueDarkText);\n  var lightTextConstrast = getContrastRatio(trueBg, trueLightText);\n\n  if (darkTextConstrast >= contrastThreshold || darkTextConstrast > lightTextConstrast) {\n    trueContrastColor = trueDarkText;\n    contrastColorToken = 'darkText';\n  } else {\n    trueContrastColor = trueLightText;\n    contrastColorToken = 'lightText';\n  }\n\n  if (true) {\n    var contrast = getContrastRatio(trueBg, trueColor ? trueColor : trueContrastColor);\n\n    if (contrast < 3 && !suppressColorAccessibilityWarning) {\n      console.warn([\"NativeBase: The contrast ratio of \".concat(contrast, \":1 for \").concat(color ? color : contrastColorToken, \" on \").concat(bg), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n    }\n  }\n\n  return contrastColorToken;\n}\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = (0, _tinycolor[\"default\"])(foreground).getLuminance();\n  var lumB = (0, _tinycolor[\"default\"])(background).getLuminance();\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\nvar themeColorsThresholdShades = {\n  rose: 500,\n  pink: 500,\n  fuchsia: 800,\n  purple: 700,\n  violet: 600,\n  indigo: 500,\n  blue: 400,\n  lightBlue: 400,\n  cyan: 300,\n  teal: 300,\n  emerald: 300,\n  tertiary: 300,\n  green: 400,\n  lime: 600,\n  yellow: 800,\n  amber: 500,\n  orange: 500,\n  red: 500,\n  warmGray: 500,\n  trueGray: 500,\n  gray: 500,\n  coolGray: 500,\n  blueGray: 500,\n  dark: 500,\n  danger: 500,\n  error: 500,\n  success: 400,\n  warning: 500,\n  muted: 500,\n  primary: 500,\n  info: 400,\n  secondary: 500,\n  light: 500\n};","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/commonjs/hooks/useContrastText.js"],"names":["Object","value","exports","_tinycolor","_interopRequireDefault","require","_useToken","_hooks","_NativeBaseContext","obj","default","contrastThreshold","trueDarkText","trueLightText","trueBg","trueColor","color","suppressColorAccessibilityWarning","accessibleColors","bgThemeColorVariant","bgShade","bg","textColor","themeColorsThresholdShades","getContrastThemeColor","getAccessibleContrastColor","shadeThreshold","darkTextConstrast","getContrastRatio","lightTextConstrast","trueContrastColor","contrastColorToken","contrast","console","lumA","lumB","Math","rose","pink","fuchsia","purple","violet","indigo","blue","lightBlue","cyan","teal","emerald","tertiary","green","lime","yellow","amber","orange","red","warmGray","trueGray","gray","coolGray","blueGray","dark","danger","error","success","warning","muted","primary","info","secondary","light"],"mappings":"AAAA;;;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;AAC3CC,EAAAA,KAAK,EADPD;AAA6C,CAA7CA;AAGAE,OAAO,CAAPA,eAAAA,GAAAA,eAAAA;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACC,OAAO,CAA/C,YAA+C,CAAR,CAAvC;;AAEA,IAAIC,SAAS,GAAGD,OAAhB,cAAA;;AAEA,IAAIE,MAAM,GAAGF,OAAb,4BAAA;;AAEA,IAAIG,kBAAkB,GAAGH,OAAzB,6BAAA;;AAEA,SAAA,sBAAA,CAAA,GAAA,EAAqC;AAAE,SAAOI,GAAG,IAAIA,GAAG,CAAVA,UAAAA,GAAAA,GAAAA,GAA8B;AAAEC,eAAvC;AAAqC,GAArC;AAEvC;;AAAA,SAAA,eAAA,CAAA,EAAA,EAAA,KAAA,EAAA,mBAAA,EAAyD;AACvD,MAAA,IAAA,GAA4E,CAAC,GAAGJ,SAAS,CAAb,QAAA,EAAA,QAAA,EAAkC,CAAA,mBAAA,EAAA,UAAA,EAAA,WAAA,EAAA,EAAA,EAAmDU,KAAK,KAALA,IAAAA,IAAkBA,KAAK,KAAK,KAA5BA,CAAAA,GAAAA,KAAAA,GAAjK,EAA8G,CAAlC,CAA5E;AAAA,MAAA,KAAA,GAAA,cAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA,MAAOL,iBAAP,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAA0BC,YAA1B,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAAwCC,aAAxC,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAAuDC,MAAvD,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAA+DC,SAA/D,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,MAAME,iCAAiC,GAAG,CAAC,GAAGT,kBAAkB,CAAtB,mBAAA,EAAA,0BAAA,EAAA,MAAA,CAA1C,iCAAA;;AACA,MAAA,KAAA,GAA2B,CAAC,GAAGD,MAAM,CAArC,mBAA2B,GAA3B;AAAA,MAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,MAAOW,gBAAP,GAAA,KAAA,CAAA,CAAA,CAAA;;AAEA,MAAA,mBAAA,EAAyB;AACvB;AAGF;;AAAA,MAAI,OAAA,EAAA,KAAJ,QAAA,EAA4B;AAC1B;AAGF;;AAAA,MAAA,SAAA,GAAuCG,EAAE,CAAFA,KAAAA,CAAvC,GAAuCA,CAAvC;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAAOF,mBAAP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAA4BC,OAA5B,GAAA,UAAA,CAAA,CAAA,CAAA;;AACA,MAAME,SAAS,GAAG,CAAA,gBAAA,IAAA,mBAAA,IAA4CC,0BAA0B,CAAtE,mBAAsE,CAAtE,GAA8FC,qBAAqB,CAAA,mBAAA,EAAnH,OAAmH,CAAnH,GAAoJC,0BAA0B,CAAA,iBAAA,EAAA,YAAA,EAAA,aAAA,EAAA,MAAA,EAAA,SAAA,EAAA,EAAA,EAAA,KAAA,EAAhM,iCAAgM,CAAhM;AACA,SAAA,SAAA;AAGF;;AAAA,SAAA,qBAAA,CAAA,mBAAA,EAAA,OAAA,EAA6D;AAC3D,MAAMC,cAAc,GAAGH,0BAA0B,CAAjD,mBAAiD,CAAjD;;AAEA,MAAIH,OAAO,IAAPA,cAAAA,KAA8BA,OAAO,IAAPA,cAAAA,IAA6BD,mBAAmB,KAAhDC,MAAAA,IAA+DD,mBAAmB,KAAnBA,MAAAA,IAAkCC,OAAO,GAA1I,cAAIA,CAAJ,EAA8J;AAC5J,WAAA,WAAA;AAGF;;AAAA,SAAA,UAAA;AAGF;;AAAA,SAAA,0BAAA,CAAA,iBAAA,EAAA,YAAA,EAAA,aAAA,EAAA,MAAA,EAAA,SAAA,EAAA,EAAA,EAAA,KAAA,EAAA,iCAAA,EAAqJ;AACnJ,MAAI,OAAA,MAAA,KAAJ,QAAA,EAAgC;AAC9BN,IAAAA,MAAM,GAANA,EAAAA;AAGF;;AAAA,MAAA,iBAAA;AACA,MAAA,kBAAA;AACA,MAAIa,iBAAiB,GAAGC,gBAAgB,CAAA,MAAA,EAAxC,YAAwC,CAAxC;AACA,MAAIC,kBAAkB,GAAGD,gBAAgB,CAAA,MAAA,EAAzC,aAAyC,CAAzC;;AAEA,MAAID,iBAAiB,IAAjBA,iBAAAA,IAA0CA,iBAAiB,GAA/D,kBAAA,EAAsF;AACpFG,IAAAA,iBAAiB,GAAjBA,YAAAA;AACAC,IAAAA,kBAAkB,GAAlBA,UAAAA;AAFF,GAAA,MAGO;AACLD,IAAAA,iBAAiB,GAAjBA,aAAAA;AACAC,IAAAA,kBAAkB,GAAlBA,WAAAA;AAGF;;AAAA,MAAA,IAAA,EAA2C;AACzC,QAAMC,QAAQ,GAAGJ,gBAAgB,CAAA,MAAA,EAASb,SAAS,GAAA,SAAA,GAAnD,iBAAiC,CAAjC;;AAEA,QAAIiB,QAAQ,GAARA,CAAAA,IAAgB,CAApB,iCAAA,EAAwD;AACtDC,MAAAA,OAAO,CAAPA,IAAAA,CAAa,CAAC,qCAAA,MAAA,CAAA,QAAA,EAAA,SAAA,EAAA,MAAA,CAAwEjB,KAAK,GAAA,KAAA,GAA7E,kBAAA,EAAA,MAAA,EAAA,MAAA,CAAD,EAAC,CAAD,EAAA,0EAAA,EAAA,gFAAA,EAAA,IAAA,CAAbiB,IAAa,CAAbA;AAEH;AAED;;AAAA,SAAA,kBAAA;AAGF;;AAAA,SAAA,gBAAA,CAAA,UAAA,EAAA,UAAA,EAAkD;AAChD,MAAMC,IAAI,GAAG,CAAC,GAAG/B,UAAJ,WAAA,EAAA,UAAA,EAAb,YAAa,EAAb;AACA,MAAMgC,IAAI,GAAG,CAAC,GAAGhC,UAAJ,WAAA,EAAA,UAAA,EAAb,YAAa,EAAb;AACA,SAAO,CAACiC,IAAI,CAAJA,GAAAA,CAAAA,IAAAA,EAAAA,IAAAA,IAAD,IAAA,KAAiCA,IAAI,CAAJA,GAAAA,CAAAA,IAAAA,EAAAA,IAAAA,IAAxC,IAAO,CAAP;AAGF;;AAAA,IAAMb,0BAA0B,GAAG;AACjCc,EAAAA,IAAI,EAD6B,GAAA;AAEjCC,EAAAA,IAAI,EAF6B,GAAA;AAGjCC,EAAAA,OAAO,EAH0B,GAAA;AAIjCC,EAAAA,MAAM,EAJ2B,GAAA;AAKjCC,EAAAA,MAAM,EAL2B,GAAA;AAMjCC,EAAAA,MAAM,EAN2B,GAAA;AAOjCC,EAAAA,IAAI,EAP6B,GAAA;AAQjCC,EAAAA,SAAS,EARwB,GAAA;AASjCC,EAAAA,IAAI,EAT6B,GAAA;AAUjCC,EAAAA,IAAI,EAV6B,GAAA;AAWjCC,EAAAA,OAAO,EAX0B,GAAA;AAYjCC,EAAAA,QAAQ,EAZyB,GAAA;AAajCC,EAAAA,KAAK,EAb4B,GAAA;AAcjCC,EAAAA,IAAI,EAd6B,GAAA;AAejCC,EAAAA,MAAM,EAf2B,GAAA;AAgBjCC,EAAAA,KAAK,EAhB4B,GAAA;AAiBjCC,EAAAA,MAAM,EAjB2B,GAAA;AAkBjCC,EAAAA,GAAG,EAlB8B,GAAA;AAmBjCC,EAAAA,QAAQ,EAnByB,GAAA;AAoBjCC,EAAAA,QAAQ,EApByB,GAAA;AAqBjCC,EAAAA,IAAI,EArB6B,GAAA;AAsBjCC,EAAAA,QAAQ,EAtByB,GAAA;AAuBjCC,EAAAA,QAAQ,EAvByB,GAAA;AAwBjCC,EAAAA,IAAI,EAxB6B,GAAA;AAyBjCC,EAAAA,MAAM,EAzB2B,GAAA;AA0BjCC,EAAAA,KAAK,EA1B4B,GAAA;AA2BjCC,EAAAA,OAAO,EA3B0B,GAAA;AA4BjCC,EAAAA,OAAO,EA5B0B,GAAA;AA6BjCC,EAAAA,KAAK,EA7B4B,GAAA;AA8BjCC,EAAAA,OAAO,EA9B0B,GAAA;AA+BjCC,EAAAA,IAAI,EA/B6B,GAAA;AAgCjCC,EAAAA,SAAS,EAhCwB,GAAA;AAiCjCC,EAAAA,KAAK,EAjCP;AAAmC,CAAnC","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useContrastText = useContrastText;\n\nvar _tinycolor = _interopRequireDefault(require(\"tinycolor2\"));\n\nvar _useToken = require(\"./useToken\");\n\nvar _hooks = require(\"../core/color-mode/hooks\");\n\nvar _NativeBaseContext = require(\"../core/NativeBaseContext\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction useContrastText(bg, color, disableContrastText) {\n  const [contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor] = (0, _useToken.useToken)('colors', ['contrastThreshold', 'darkText', 'lightText', bg, color !== null && color !== void 0 ? color : '']);\n  const suppressColorAccessibilityWarning = (0, _NativeBaseContext.useNativeBaseConfig)('NativeBaseConfigProvider').config.suppressColorAccessibilityWarning;\n  const [accessibleColors] = (0, _hooks.useAccessibleColors)();\n\n  if (disableContrastText) {\n    return;\n  }\n\n  if (typeof bg !== 'string') {\n    return;\n  }\n\n  const [bgThemeColorVariant, bgShade] = bg.split('.');\n  const textColor = !accessibleColors && bgThemeColorVariant && themeColorsThresholdShades[bgThemeColorVariant] ? getContrastThemeColor(bgThemeColorVariant, bgShade) : getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning);\n  return textColor;\n}\n\nfunction getContrastThemeColor(bgThemeColorVariant, bgShade) {\n  const shadeThreshold = themeColorsThresholdShades[bgThemeColorVariant];\n\n  if (bgShade && shadeThreshold && (bgShade >= shadeThreshold && bgThemeColorVariant !== 'dark' || bgThemeColorVariant === 'dark' && bgShade < shadeThreshold)) {\n    return 'lightText';\n  }\n\n  return 'darkText';\n}\n\nfunction getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning) {\n  if (typeof trueBg !== 'string') {\n    trueBg = bg;\n  }\n\n  let trueContrastColor;\n  let contrastColorToken;\n  let darkTextConstrast = getContrastRatio(trueBg, trueDarkText);\n  let lightTextConstrast = getContrastRatio(trueBg, trueLightText);\n\n  if (darkTextConstrast >= contrastThreshold || darkTextConstrast > lightTextConstrast) {\n    trueContrastColor = trueDarkText;\n    contrastColorToken = 'darkText';\n  } else {\n    trueContrastColor = trueLightText;\n    contrastColorToken = 'lightText';\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    const contrast = getContrastRatio(trueBg, trueColor ? trueColor : trueContrastColor);\n\n    if (contrast < 3 && !suppressColorAccessibilityWarning) {\n      console.warn([\"NativeBase: The contrast ratio of \".concat(contrast, \":1 for \").concat(color ? color : contrastColorToken, \" on \").concat(bg), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n    }\n  }\n\n  return contrastColorToken;\n}\n\nfunction getContrastRatio(foreground, background) {\n  const lumA = (0, _tinycolor.default)(foreground).getLuminance();\n  const lumB = (0, _tinycolor.default)(background).getLuminance();\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\nconst themeColorsThresholdShades = {\n  rose: 500,\n  pink: 500,\n  fuchsia: 800,\n  purple: 700,\n  violet: 600,\n  indigo: 500,\n  blue: 400,\n  lightBlue: 400,\n  cyan: 300,\n  teal: 300,\n  emerald: 300,\n  tertiary: 300,\n  green: 400,\n  lime: 600,\n  yellow: 800,\n  amber: 500,\n  orange: 500,\n  red: 500,\n  warmGray: 500,\n  trueGray: 500,\n  gray: 500,\n  coolGray: 500,\n  blueGray: 500,\n  dark: 500,\n  danger: 500,\n  error: 500,\n  success: 400,\n  warning: 500,\n  muted: 500,\n  primary: 500,\n  info: 400,\n  secondary: 500,\n  light: 500\n};\n//# sourceMappingURL=useContrastText.js.map"]},"metadata":{},"sourceType":"script"}