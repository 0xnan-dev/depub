{"ast":null,"code":"import _objectWithoutProperties from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"theme\"];\nimport get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useNativeBase } from \"./../useNativeBase\";\nimport { omitUndefined, extractInObject } from \"./../../theme/tools/\";\nimport { filterShadowProps } from \"./../../utils/filterShadowProps\";\nimport { calculateProps } from \"./utils\";\n\nvar filterAndCalculateProps = function filterAndCalculateProps(theme, colorModeProps, componentTheme, propsReceived, windowWidth) {\n  var _extractInObject = extractInObject(propsReceived, ['children', 'style', 'onPress', 'icon', 'onOpen', 'onClose']),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      ignoredProps = _extractInObject2[0],\n      props = _extractInObject2[1];\n\n  var newProps = calculateProps(theme, colorModeProps, componentTheme, props, windowWidth);\n  var mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component, propsReceived) {\n  _s();\n\n  var _useWindowDimensions;\n\n  var _useNativeBase = useNativeBase(),\n      theme = _useNativeBase.theme,\n      colorModeProps = _objectWithoutProperties(_useNativeBase, _excluded);\n\n  var componentTheme = get(theme, \"components.\".concat(component));\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  return filterAndCalculateProps(omit(theme, ['components']), colorModeProps, componentTheme, propsReceived, windowWidth);\n}\n\n_s(useThemeProps, \"Lq4FZGfE5y4B4o823Cv+7BTl4mU=\", false, function () {\n  return [useNativeBase, useWindowDimensions];\n});\n\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/hooks/useThemeProps/useProps.js"],"names":["filterAndCalculateProps","ignoredProps","props","extractInObject","newProps","calculateProps","mergedProps","filterShadowProps","Platform","omitUndefined","useThemeProps","theme","colorModeProps","useNativeBase","componentTheme","get","windowWidth","_useWindowDimensions","useWindowDimensions","omit"],"mappings":";;;;;;AAAA,OAAA,GAAA,MAAA,YAAA;AACA,OAAA,IAAA,MAAA,aAAA;;;AAEA,SAAA,aAAA;AACA,SAAA,aAAA,EAAA,eAAA;AACA,SAAA,iBAAA;AACA,SAAA,cAAA;;AAEA,IAAMA,uBAAuB,GAAvBA,SAAAA,uBAAAA,CAA0B,KAA1BA,EAA0B,cAA1BA,EAA0B,cAA1BA,EAA0B,aAA1BA,EAA0B,WAA1BA,EAAiG;AAIrG,MAAA,gBAAA,GAA4BG,eAAe,CAAA,aAAA,EAAgB,CAAA,UAAA,EAAA,OAAA,EAAA,SAAA,EAAA,MAAA,EAAA,QAAA,EAA3D,SAA2D,CAAhB,CAA3C;AAAA,MAAA,iBAAA,GAAA,cAAA,CAAA,gBAAA,EAAA,CAAA,CAAA;AAAA,MAAKF,YAAL,GAAA,iBAAA,CAAA,CAAA,CAAA;AAAA,MAAmBC,KAAnB,GAAA,iBAAA,CAAA,CAAA,CAAA;;AACA,MAAIE,QAAQ,GAAGC,cAAc,CAAA,KAAA,EAAA,cAAA,EAAA,cAAA,EAAA,KAAA,EAA7B,WAA6B,CAA7B;AACA,MAAIC,WAAW,GAAGC,iBAAiB,CAAA,QAAA,EAAA,YAAA,EAAyBC,QAAQ,CAApE,EAAmC,CAAnC;AACA,SAAOC,aAAa,CAApB,WAAoB,CAApB;AAPF,CAAA;;AAUA,OAAO,SAAA,aAAA,CAAA,SAAA,EAAA,aAAA,EAAiD;AAAA,EAAA,EAAA;;AACtD,MAAA,oBAAA;;AAEA,MAAA,cAAA,GAGII,aAHJ,EAAA;AAAA,MACEF,KADF,GAAA,cAAA,CAAA,KAAA;AAAA,MAEKC,cAFL,GAAA,wBAAA,CAAA,cAAA,EAAA,SAAA,CAAA;;AAKA,MAAME,cAAc,GAAGC,GAAG,CAAA,KAAA,EAAQ,cAAA,MAAA,CAAlC,SAAkC,CAAR,CAA1B;AAEA,MAAMC,WAAW,GAAG,CAACC,oBAAoB,GAAGC,mBAAxB,EAAA,MAAA,IAAA,IAA2DD,oBAAoB,KAAK,KAApF,CAAA,GAA6F,KAA7F,CAAA,GAAsGA,oBAAoB,CAA9I,KAAA;AAEA,SAAOjB,uBAAuB,CAACmB,IAAI,CAAA,KAAA,EAAQ,CAAb,YAAa,CAAR,CAAL,EAAA,cAAA,EAAA,cAAA,EAAA,aAAA,EAA9B,WAA8B,CAA9B;;;GAZcT,a;UAMVG,a,EAIwCK,mB","sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (theme, colorModeProps, componentTheme, propsReceived, windowWidth) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  let [ignoredProps, props] = extractInObject(propsReceived, ['children', 'style', 'onPress', 'icon', 'onOpen', 'onClose']);\n  let newProps = calculateProps(theme, colorModeProps, componentTheme, props, windowWidth);\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component, propsReceived) {\n  var _useWindowDimensions;\n\n  const {\n    theme,\n    ...colorModeProps\n  } = useNativeBase(); // console.log('THEME = ', theme);\n\n  const componentTheme = get(theme, \"components.\".concat(component)); // console.log('COMPONENT THEME = ', componentTheme);\n\n  const windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width; // To pass the component theme props and component props seperately\n\n  return filterAndCalculateProps(omit(theme, ['components']), colorModeProps, componentTheme, propsReceived, windowWidth);\n}\n//# sourceMappingURL=useProps.js.map"]},"metadata":{},"sourceType":"module"}