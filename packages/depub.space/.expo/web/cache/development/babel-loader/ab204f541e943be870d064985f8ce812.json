{"ast":null,"code":"import { createContext } from 'react';\nexport var HybridContext = createContext({\n  colorMode: {\n    colorMode: 'light',\n    toggleColorMode: function toggleColorMode() {},\n    setColorMode: function setColorMode() {},\n    accessibleColors: false,\n    setAccessibleColors: function setAccessibleColors() {}\n  }\n});\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/core/hybrid-overlay/Context.js"],"names":["HybridContext","createContext","colorMode","toggleColorMode","setColorMode","accessibleColors","setAccessibleColors"],"mappings":"AAAA,SAAA,aAAA,QAAA,OAAA;AACA,OAAO,IAAMA,aAAa,GAAgBC,aAAa,CAAC;AACtDC,EAAAA,SAAS,EAAE;AACTA,IAAAA,SAAS,EADA,OAAA;AAETC,IAAAA,eAAe,EAAE,SAAA,eAAA,GAAM,CAFd,CAAA;AAGTC,IAAAA,YAAY,EAAE,SAAA,YAAA,GAAM,CAHX,CAAA;AAITC,IAAAA,gBAAgB,EAJP,KAAA;AAKTC,IAAAA,mBAAmB,EAAE,SAAA,mBAAA,GAAM,CANxB;AACM;AAD2C,CAAD,CAAhD","sourcesContent":["import { createContext } from 'react';\nexport const HybridContext = /*#__PURE__*/createContext({\n  colorMode: {\n    colorMode: 'light',\n    toggleColorMode: () => {},\n    setColorMode: () => {},\n    accessibleColors: false,\n    setAccessibleColors: () => {}\n  }\n});\n//# sourceMappingURL=Context.js.map"]},"metadata":{},"sourceType":"module"}