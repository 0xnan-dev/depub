{"ast":null,"code":"import _asyncToGenerator from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { HybridContext } from \"./../hybrid-overlay/Context\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nexport var useColorMode = function useColorMode() {\n  _s();\n\n  var _React$useContext = React.useContext(HybridContext),\n      colorModeContext = _React$useContext.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\n\n_s(useColorMode, \"ijWpSq89Dk+m1T0EDxx+oj16Etk=\");\n\nexport function useColorModeValue(light, dark) {\n  _s2();\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === 'dark' ? dark : light;\n}\n\n_s2(useColorModeValue, \"2FlznkK71qNOMfMHVcz5TMepWEE=\", false, function () {\n  return [useColorMode];\n});\n\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  _s3();\n\n  var systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  var _useState = useState(initialColorMode),\n      colorMode = _useState[0],\n      setRawMode = _useState[1];\n\n  var setColorMode = React.useCallback(function () {\n    var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(val) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!colorModeManager) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return colorModeManager.set(val);\n\n            case 3:\n              setRawMode(val);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [colorModeManager]);\n  useEffect(function () {\n    if (colorModeManager) {\n      (function () {\n        var _getMode = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {\n          var value;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return colorModeManager.get(initialColorMode);\n\n                case 2:\n                  value = _context2.sent;\n\n                  if (value && value !== colorMode) {\n                    setRawMode(value);\n                  }\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function getMode() {\n          return _getMode.apply(this, arguments);\n        }\n\n        return getMode;\n      })()();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  useEffect(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\n\n_s3(useModeManager, \"hERQdoGCzLssPXpOCVG78d5mpNU=\", false, function () {\n  return [useColorScheme];\n});\n\nexport function useAccessibleColors() {\n  _s4();\n\n  var _React$useContext2 = React.useContext(HybridContext),\n      colorModeContext = _React$useContext2.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}\n\n_s4(useAccessibleColors, \"ijWpSq89Dk+m1T0EDxx+oj16Etk=\");\n\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/core/color-mode/hooks.js"],"names":["useColorMode","colorModeContext","React","useColorModeValue","colorMode","useModeManager","systemColorMode","useColorScheme","initialColorMode","setRawMode","useState","setColorMode","colorModeManager","useEffect","value","useAccessibleColors","toggleAccessibleColors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport { useColorScheme } from 'react-native';\nexport const useColorMode = () => {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  const {\n    colorMode\n  } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState(initialColorMode);\n  const setColorMode = React.useCallback(async val => {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n\n    setRawMode(val);\n  }, [colorModeManager]); // For initial setting initial color mode from storage\n\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]); // Set system color mode only when user has not passed a colorModeManager\n\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode,\n    setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n\n  const toggleAccessibleColors = () => colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}\n//# sourceMappingURL=hooks.js.map"]},"metadata":{},"sourceType":"module"}