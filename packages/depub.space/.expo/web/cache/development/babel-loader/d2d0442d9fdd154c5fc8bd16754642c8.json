{"ast":null,"code":"import _objectWithoutProperties from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"color\", \"size\", \"style\"];\nimport React, { memo, forwardRef } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { usePropsResolution, useStyledSystemPropsResolver } from \"../../../hooks\";\nimport { getColor } from \"../../../theme\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useTheme } from \"../../../hooks\";\n\nvar Spinner = function Spinner(props, ref) {\n  _s();\n\n  var _usePropsResolution = usePropsResolution('Spinner', props),\n      color = _usePropsResolution.color,\n      size = _usePropsResolution.size,\n      style = _usePropsResolution.style,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var resolvedColor = getColor(color, useTheme().colors, useTheme());\n  var resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(ActivityIndicator, {\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\n\n_s(Spinner, \"mvwPPwpi9UCIBjlqj4wnWHwpLeI=\", false, function () {\n  return [usePropsResolution, useTheme, useTheme, useStyledSystemPropsResolver, useHasResponsiveProps];\n});\n\n_c = Spinner;\nexport default _c3 = memo(_c2 = forwardRef(Spinner));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Spinner\");\n$RefreshReg$(_c2, \"%default%$memo\");\n$RefreshReg$(_c3, \"%default%\");\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/components/primitives/Spinner/index.js"],"names":["Spinner","color","size","style","resolvedProps","usePropsResolution","resolvedColor","getColor","useTheme","resolvedStyle","useStyledSystemPropsResolver","useHasResponsiveProps","React","accessible","accessibilityLabel","ref","memo","forwardRef"],"mappings":";;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;;AAEA,SAAA,kBAAA,EAAA,4BAAA;AACA,SAAA,QAAA;AACA,SAAA,qBAAA;AACA,SAAA,QAAA;;AAEA,IAAMA,OAAO,GAAPA,SAAAA,OAAAA,CAAU,KAAVA,EAAU,GAAVA,EAA0B;AAAA,EAAA,EAAA;;AAC9B,MAAA,mBAAA,GAKIK,kBAAkB,CAAA,SAAA,EALtB,KAKsB,CALtB;AAAA,MACEJ,KADF,GAAA,mBAAA,CAAA,KAAA;AAAA,MAEEC,IAFF,GAAA,mBAAA,CAAA,IAAA;AAAA,MAGEC,KAHF,GAAA,mBAAA,CAAA,KAAA;AAAA,MAIKC,aAJL,GAAA,wBAAA,CAAA,mBAAA,EAAA,SAAA,CAAA;;AAMA,MAAME,aAAa,GAAGC,QAAQ,CAAA,KAAA,EAAQC,QAAQ,GAAhB,MAAA,EAA2BA,QAAzD,EAA8B,CAA9B;AACA,MAAMC,aAAa,GAAGC,4BAA4B,CAAlD,aAAkD,CAAlD;;AAEA,MAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AAGF;;AAAA,SAAoBC,KAAK,CAALA,aAAAA,CAAAA,iBAAAA,EAAuC;AACzDC,IAAAA,UAAU,EAD+C,IAAA;AAEzDC,IAAAA,kBAAkB,EAFuC,SAAA;AAGzDb,IAAAA,KAAK,EAHoD,aAAA;AAIzDc,IAAAA,GAAG,EAJsD,GAAA;AAKzDb,IAAAA,IAAI,EALqD,IAAA;AAMzDC,IAAAA,KAAK,EAAE,CAAA,aAAA,EANT,KAMS;AANkD,GAAvCS,CAApB;AAdF,CAAA;;GAAMZ,O;UAMAK,kB,EACkCG,Q,EAAmBA,Q,EACnCE,4B,EAElBC,qB;;;KAVAX,O;AAwBN,eAAA,GAAA,GAA4BgB,IAAI,CAAA,GAAA,GAAeC,UAAU,CAAzD,OAAyD,CAAzB,CAAhC","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport { usePropsResolution, useStyledSystemPropsResolver } from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props, ref) => {\n  const {\n    color,\n    size,\n    style,\n    ...resolvedProps\n  } = usePropsResolution('Spinner', props);\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  const resolvedStyle = useStyledSystemPropsResolver(resolvedProps); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(ActivityIndicator, {\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Spinner));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}