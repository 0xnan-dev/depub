{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect } from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nvar keyboardDismissHandlers = [];\nexport var keyboardDismissHandlerManager = {\n  push: function push(handler) {\n    keyboardDismissHandlers.push(handler);\n    return function () {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(function (h) {\n        return h !== handler;\n      });\n    };\n  },\n  length: function length() {\n    return keyboardDismissHandlers.length;\n  },\n  pop: function pop() {\n    return keyboardDismissHandlers.pop();\n  }\n};\nexport var useKeyboardDismissable = function useKeyboardDismissable(_ref) {\n  _s();\n\n  var enabled = _ref.enabled,\n      callback = _ref.callback;\n  React.useEffect(function () {\n    var cleanupFn = function cleanupFn() {};\n\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n\n    return function () {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n  useBackHandler({\n    enabled: enabled,\n    callback: callback\n  });\n};\n\n_s(useKeyboardDismissable, \"KlZkzYNTu8FER+U0FBbL+PtOOIo=\", false, function () {\n  return [useBackHandler];\n});\n\nexport function useBackHandler(_ref2) {\n  _s2();\n\n  var enabled = _ref2.enabled,\n      callback = _ref2.callback;\n  useEffect(function () {\n    var backHandler = function backHandler() {\n      callback();\n      return true;\n    };\n\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n\n    return function () {\n      return BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    };\n  }, [enabled, callback]);\n}\n\n_s2(useBackHandler, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/hooks/useKeyboardDismissable.js"],"names":["keyboardDismissHandlers","keyboardDismissHandlerManager","push","h","length","pop","useKeyboardDismissable","enabled","callback","React","cleanupFn","useBackHandler","useEffect","backHandler","BackHandler"],"mappings":";;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,SAAA,QAAA,OAAA;;AAEA,IAAIA,uBAAuB,GAA3B,EAAA;AACA,OAAO,IAAMC,6BAA6B,GAAG;AAC3CC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,OAAA,EAAW;AACfF,IAAAA,uBAAuB,CAAvBA,IAAAA,CAAAA,OAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,uBAAuB,GAAGA,uBAAuB,CAAvBA,MAAAA,CAA+B,UAAA,CAAA,EAAC;AAAA,eAAIG,CAAC,KAAL,OAAA;AAA1DH,OAA0BA,CAA1BA;AADF,KAAA;AAHyC,GAAA;AAO3CI,EAAAA,MAAM,EAAE,SAAA,MAAA,GAAA;AAAA,WAAMJ,uBAAuB,CAA7B,MAAA;AAPmC,GAAA;AAQ3CK,EAAAA,GAAG,EAAE,SAAA,GAAA,GAAM;AACT,WAAOL,uBAAuB,CAA9B,GAAOA,EAAP;AATG;AAAsC,CAAtC;AAgBP,OAAO,IAAMM,sBAAsB,GAAtBA,SAAAA,sBAAAA,CAAyB,IAAzBA,EAGP;AAAA,EAAA,EAAA;;AAFJC,MAAAA,OAEI,GAAA,IAAA,CAFJA,OAAAA;AAAAA,MACAC,QACI,GAAA,IAAA,CADJA,QADAD;AAGAE,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAIC,SAAS,GAAG,SAAA,SAAA,GAAM,CAAtB,CAAA;;AAEA,QAAA,OAAA,EAAa;AACXA,MAAAA,SAAS,GAAGT,6BAA6B,CAA7BA,IAAAA,CAAZS,QAAYT,CAAZS;AADF,KAAA,MAEO;AACLA,MAAAA,SAAS;AAGX;;AAAA,WAAO,YAAM;AACXA,MAAAA,SAAS;AADX,KAAA;AATFD,GAAAA,EAYG,CAAA,OAAA,EAZHA,QAYG,CAZHA;AAaAE,EAAAA,cAAc,CAAC;AACbJ,IAAAA,OAAO,EADM,OAAA;AAEbC,IAAAA,QAAQ,EAFVG;AAAe,GAAD,CAAdA;AAjBK,CAAA;;GAAML,sB;UAiBXK,c;;;AAKF,OAAO,SAAA,cAAA,CAAA,KAAA,EAGJ;AAAA,EAAA,GAAA;;AAFDJ,MAAAA,OAEC,GAAA,KAAA,CAFDA,OAAAA;AAAAA,MACAC,QACC,GAAA,KAAA,CADDA,QADAD;AAGAK,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIC,WAAW,GAAXA,SAAAA,WAAAA,GAAoB;AACtBL,MAAAA,QAAQ;AACR,aAAA,IAAA;AAFF,KAAA;;AAKA,QAAA,OAAA,EAAa;AACXM,MAAAA,WAAW,CAAXA,gBAAAA,CAAAA,mBAAAA,EAAAA,WAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,WAAW,CAAXA,mBAAAA,CAAAA,mBAAAA,EAAAA,WAAAA;AAGF;;AAAA,WAAO,YAAA;AAAA,aAAMA,WAAW,CAAXA,mBAAAA,CAAAA,mBAAAA,EAAN,WAAMA,CAAN;AAAP,KAAA;AAZO,GAAA,EAaN,CAAA,OAAA,EAbHF,QAaG,CAbM,CAATA;;;IAJcD,c","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\nlet keyboardDismissHandlers = [];\nexport const keyboardDismissHandlerManager = {\n  push: handler => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(h => h !== handler);\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  }\n};\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\n\nexport const useKeyboardDismissable = ({\n  enabled,\n  callback\n}) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n  useBackHandler({\n    enabled,\n    callback\n  });\n};\nexport function useBackHandler({\n  enabled,\n  callback\n}) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n\n    return () => BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n//# sourceMappingURL=useKeyboardDismissable.js.map"]},"metadata":{},"sourceType":"module"}