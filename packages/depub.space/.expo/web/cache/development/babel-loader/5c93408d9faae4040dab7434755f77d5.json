{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Overlay = Overlay;\n\nvar _overlays = require(\"@react-native-aria/overlays\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _ExitAnimationContext = require(\"./ExitAnimationContext\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction Overlay(_ref) {\n  var children = _ref.children,\n      isOpen = _ref.isOpen,\n      _ref$useRNModalOnAndr = _ref.useRNModalOnAndroid,\n      useRNModalOnAndroid = _ref$useRNModalOnAndr === void 0 ? false : _ref$useRNModalOnAndr,\n      _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n      isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n      _ref$animationPreset = _ref.animationPreset,\n      animationPreset = _ref$animationPreset === void 0 ? 'fade' : _ref$animationPreset,\n      onRequestClose = _ref.onRequestClose;\n\n  var _react$default$useSta = _react[\"default\"].useState(!isOpen),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      exited = _react$default$useSta2[0],\n      setExited = _react$default$useSta2[1];\n\n  (0, _hooks.useKeyboardDismissable)({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : function () {}\n  });\n\n  if (exited && !isOpen) {\n    return null;\n  }\n\n  if (_reactNative.Platform.OS === 'android' && useRNModalOnAndroid) {\n    return _react[\"default\"].createElement(_ExitAnimationContext.ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      }\n    }, _react[\"default\"].createElement(_reactNative.Modal, {\n      transparent: true,\n      visible: true,\n      onRequestClose: onRequestClose\n    }, children));\n  }\n\n  return _react[\"default\"].createElement(_overlays.OverlayContainer, null, _react[\"default\"].createElement(_ExitAnimationContext.ExitAnimationContext.Provider, {\n    value: {\n      exited: exited,\n      setExited: setExited\n    }\n  }, children));\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/commonjs/components/primitives/Overlay/Overlay.js"],"names":["Object","value","exports","_overlays","require","_react","_interopRequireDefault","_hooks","_ExitAnimationContext","obj","default","children","isOpen","useRNModalOnAndroid","isKeyboardDismissable","animationPreset","onRequestClose","exited","setExited","enabled","callback","_reactNative","transparent","visible"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Overlay = Overlay;\n\nvar _overlays = require(\"@react-native-aria/overlays\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _ExitAnimationContext = require(\"./ExitAnimationContext\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nfunction Overlay({\n  children,\n  isOpen,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose\n}) {\n  const [exited, setExited] = _react.default.useState(!isOpen);\n\n  (0, _hooks.useKeyboardDismissable)({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {}\n  }); //TODO: performance remove-below-lines of code after updating react-native-aria\n\n  if (exited && !isOpen) {\n    return null;\n  } // Android handles multiple Modal in RN and is better for accessibility as it shifts accessibility focus on mount, however it may not needed in case of tooltips, toast where one doesn't need to shift accessibility focus\n  //TODO: performance add-below-lines of code after updating react-native-aria\n  // let display = exited && !isOpen ? 'none' : 'contents';\n  // if (animationPreset === 'slide') {\n  //   display = 'contents';\n  // }\n\n\n  if (_reactNative.Platform.OS === 'android' && useRNModalOnAndroid) {\n    return /*#__PURE__*/_react.default.createElement(_ExitAnimationContext.ExitAnimationContext.Provider, {\n      value: {\n        exited,\n        setExited\n      }\n    }, /*#__PURE__*/_react.default.createElement(_reactNative.Modal, {\n      transparent: true,\n      visible: true,\n      onRequestClose: onRequestClose\n    }, children));\n  } // Since OverlayContainer mounts children in NativeBaseProvider  using Context, we need to pass the context by wrapping children\n  //TODO: performance add-below-lines of code after updating react-native-aria\n  // <OverlayContainer style={{ display: display }}>\n\n\n  return (\n    /*#__PURE__*/\n    //@ts-ignore\n    _react.default.createElement(_overlays.OverlayContainer, null, /*#__PURE__*/_react.default.createElement(_ExitAnimationContext.ExitAnimationContext.Provider, {\n      value: {\n        exited,\n        setExited\n      }\n    }, children))\n  );\n}\n//# sourceMappingURL=Overlay.js.map"]},"metadata":{},"sourceType":"script"}