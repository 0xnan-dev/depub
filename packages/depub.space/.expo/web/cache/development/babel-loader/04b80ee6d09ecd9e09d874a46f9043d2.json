{"ast":null,"code":"import _objectWithoutProperties from \"/media/disk1/projects/depub.space/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"children\", \"startColor\", \"endColor\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { canUseDom } from \"../../../utils\";\nimport Box from \"../../primitives/Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useToken } from \"../../../hooks/useToken\";\n\nvar Skeleton = function Skeleton(props, ref) {\n  _s();\n\n  var isDomUsable = canUseDom();\n\n  var _usePropsResolution = usePropsResolution('Skeleton', props),\n      children = _usePropsResolution.children,\n      startColor = _usePropsResolution.startColor,\n      endColor = _usePropsResolution.endColor,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var blinkAnim = React.useRef(new Animated.Value(0)).current;\n  var tokenisedStartColor = useToken('colors', startColor);\n  React.useEffect(function () {\n    if (isDomUsable) {\n      var blink = Animated.sequence([Animated.timing(blinkAnim, {\n        toValue: 1,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: Platform.OS !== 'web'\n      }), Animated.timing(blinkAnim, {\n        toValue: 0,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: Platform.OS !== 'web'\n      })]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n  var skeletonStyle = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim\n    }\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? children : React.createElement(Box, _extends({\n    bg: endColor\n  }, resolvedProps, {\n    ref: ref,\n    overflow: \"hidden\"\n  }), React.createElement(Animated.View, {\n    style: skeletonStyle.skeleton\n  }));\n};\n\n_s(Skeleton, \"2XqADYua+RF6B+UaQZNvd70RA2U=\", false, function () {\n  return [usePropsResolution, useToken, useHasResponsiveProps];\n});\n\n_c = Skeleton;\nexport default _c3 = memo(_c2 = forwardRef(Skeleton));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Skeleton\");\n$RefreshReg$(_c2, \"%default%$memo\");\n$RefreshReg$(_c3, \"%default%\");\n;\n\nvar _a, _b;\n\nif (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n    module.hot.accept();\n\n    if (prevExports !== null) {\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/media/disk1/projects/depub.space/node_modules/native-base/lib/module/components/composites/Skeleton/Skeleton.js"],"names":["_extends","Object","i","arguments","source","target","Skeleton","isDomUsable","canUseDom","children","startColor","endColor","resolvedProps","usePropsResolution","blinkAnim","React","Animated","tokenisedStartColor","useToken","blink","toValue","duration","useNativeDriver","Platform","skeletonStyle","skeleton","height","width","backgroundColor","opacity","useHasResponsiveProps","bg","ref","overflow","style","memo","forwardRef"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { memo, forwardRef } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props, ref) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props); // Setting blink Animation\n\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedStartColor = useToken('colors', startColor); // Generating blink animation in a sequence\n\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([Animated.timing(blinkAnim, {\n        toValue: 1,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: Platform.OS !== 'web'\n      }), Animated.timing(blinkAnim, {\n        toValue: 0,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: Platform.OS !== 'web'\n      })]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n  const skeletonStyle = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim // Bind opacity to animated value\n\n    }\n  }; //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? children : /*#__PURE__*/React.createElement(Box, _extends({\n    bg: endColor\n  }, resolvedProps, {\n    ref: ref,\n    overflow: \"hidden\"\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    style: skeletonStyle.skeleton\n  }));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Skeleton));\n//# sourceMappingURL=Skeleton.js.map"]},"metadata":{},"sourceType":"module"}